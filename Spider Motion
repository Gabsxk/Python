import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from mpl_toolkits.mplot3d import Axes3D

# Define spider motion parameters
A = 0.5  # Amplitude
omega = 1  # Angular frequency
phi = np.pi / 4  # Phase shift

# Define time range and time step
t = np.linspace(0, 2 * np.pi, 1000)
dt = t[1] - t[0]

# Initialize spider position
x = np.zeros_like(t)
y = np.zeros_like(t)
z = np.zeros_like(t)

# Define spider motion
for i in range(len(t)):
    x[i] = A * np.sin(omega * t[i] + phi)
    y[i] = A * np.cos(omega * t[i] + phi)
    z[i] = 0.1 * np.sin(4 * omega * t[i])

    # Add random noise to simulate spider movement
    x[i] += np.random.normal(scale=0.05)
    y[i] += np.random.normal(scale=0.05)
    z[i] += np.random.normal(scale=0.01)

# Define spider body parameters
body_radius = 0.2
body_color = 'grey'

# Create 3D plot
fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.set_xlim3d(-1.5, 1.5)
ax.set_ylim3d(-1.5, 1.5)
ax.set_zlim3d(-0.5, 0.5)
ax.set_title('Spider Motion')
ax.set_xlabel('X Position')
ax.set_ylabel('Y Position')
ax.set_zlabel('Z Position')

# Initialize spider body
body = ax.plot([], [], [], 'o', markersize=body_radius, color=body_color)[0]

# Initialize spider legs
legs = []
for i in range(8):
    leg = ax.plot([], [], [], '-', linewidth=2, color='black')[0]
    legs.append(leg)

# Define function to update spider position at each frame
def update(frame):
    # Update spider position
    body.set_data([x[frame]], [y[frame]])
    body.set_3d_properties([z[frame]])

    # Update spider legs
    leg_angles = np.linspace(0, 2 * np.pi, 8, endpoint=False)
    for i, leg in enumerate(legs):
        leg_x = [x[frame], x[frame] + 0.2 * np.sin(leg_angles[i] + np.pi / 4)]
        leg_y = [y[frame], y[frame] + 0.2 * np.cos(leg_angles[i] + np.pi / 4)]
        leg_z = [z[frame], z[frame] - 0.2 * np.sin(leg_angles[i] + np.pi / 4)]
        leg.set_data(leg_x, leg_y)
        leg.set_3d_properties(leg_z)

    return body, *legs

# Create animation
ani = FuncAnimation(fig, update, frames=len(t), interval=30, blit=True)

# Show animation
plt.show()
